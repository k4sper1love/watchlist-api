// Package api Code generated by swaggo/swag. DO NOT EDIT
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "s_yelkin@proton.me"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Log in to your account using your email and password. Returns tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log in to your account",
                "parameters": [
                    {
                        "description": "Login information",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Log out of your account using your refresh token in the Authorization header.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log out of your account",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Refresh your access token using the refresh token in the Authorization header.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.AccessTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user using a username, email and password. Returns user information and tokens.\nBasic permissions are available to you: creating films and collections.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Information about the new user ",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/swagger.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collections": {
            "get": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get a list of collections by user ID from authentication token. It also returns metadata.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Get user collections",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by ` + "`" + `name` + "`" + `",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Specify the desired ` + "`" + `page` + "`" + `",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Specify the desired ` + "`" + `page size` + "`" + `",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sorting by ` + "`" + `id` + "`" + `, ` + "`" + `name` + "`" + `, ` + "`" + `created_at` + "`" + `. Use ` + "`" + `-` + "`" + ` for desc",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.CollectionsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Add a new collection. You will be granted the permissions to get, update, and delete it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Add new collection",
                "parameters": [
                    {
                        "description": "Information about the new collection",
                        "name": "collection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.CollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/swagger.CollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collection_id}": {
            "get": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get the collection by ID. You must have permissions to get this collection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Get collection by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Collection ID",
                        "name": "collection_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.CollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Update the collection by ID. You must have the permissions to update it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Update the collection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Collection ID",
                        "name": "collection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New information about the collection",
                        "name": "film",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.CollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.FilmResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Delete the collection by ID. You must have the permissions to delete it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Delete the collection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Collection ID",
                        "name": "collection_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collection_id}/films": {
            "get": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get a list of films from collection by collection ID. It also returns metadata.\nYou must have permissions to get this collection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectionFilms"
                ],
                "summary": "Get films from collection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Collection ID",
                        "name": "collection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Specify the desired ` + "`" + `page` + "`" + `",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Specify the desired ` + "`" + `page size` + "`" + `",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sorting by ` + "`" + `film_id` + "`" + `, ` + "`" + `added_at` + "`" + `. Use ` + "`" + `-` + "`" + ` for desc",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.CollectionFilmsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collection_id}/films/{film_id}": {
            "get": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get the film from collection by ID. You must have permissions to get this collection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectionFilms"
                ],
                "summary": "Get film from collection by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Collection ID",
                        "name": "collection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Film ID",
                        "name": "film_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.CollectionFilmResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Update the film in the collection by ID` + "`" + `s. You must have the permissions to update collection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectionFilms"
                ],
                "summary": "Update film in collection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Collection ID",
                        "name": "collection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Film ID",
                        "name": "film_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New information about the film in the collection",
                        "name": "film",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.CollectionFilmRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.CollectionFilmResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Add a film to the collection. You must have rights to get the film and update the collection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectionFilms"
                ],
                "summary": "Add film to collection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Collection ID",
                        "name": "collection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Film ID",
                        "name": "film_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/swagger.CollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collection_id}/films/{films_id}": {
            "delete": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Delete the film from the collection by ID. You must have the permissions to update collection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collectionFilms"
                ],
                "summary": "Delete film from collection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Collection ID",
                        "name": "collection_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Film ID",
                        "name": "film_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/films": {
            "get": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get a list of films by user ID from authentication token. It also returns metadata.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "Get user films",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by ` + "`" + `title` + "`" + `",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Filter by ` + "`" + `minimum rating` + "`" + `",
                        "name": "rating_min",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Filter by ` + "`" + `maximum rating` + "`" + `",
                        "name": "rating_max",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Specify the desired ` + "`" + `page` + "`" + `",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Specify the desired ` + "`" + `page size` + "`" + `",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sorting by ` + "`" + `id` + "`" + `, ` + "`" + `title` + "`" + `, ` + "`" + `rating` + "`" + `. Use ` + "`" + `-` + "`" + ` for desc",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.FilmsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Add a new film. You will be granted the permissions to get, update, and delete it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "Add new film",
                "parameters": [
                    {
                        "description": "Information about the new film",
                        "name": "film",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.FilmRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/swagger.FilmResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/films/{film_id}": {
            "get": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get the film by ID. You must have permissions to get this film.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "Get film by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Film ID",
                        "name": "film_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.FilmResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Update the film by ID. You must have the permissions to update it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "Update the film",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Film ID",
                        "name": "film_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New information about the film",
                        "name": "film",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.FilmRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.FilmResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Delete the film by ID. You must have the permissions to delete it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "Delete the film",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Film ID",
                        "name": "film_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "description": "Check the API status. Returns status and system information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Check API status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.HealthCheckResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get information about user by ID using an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user account",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Update information about user by ID using an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user account",
                "parameters": [
                    {
                        "description": "New information about the user",
                        "name": "username",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Delete user by ID using an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete user account",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swagger.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "filters.Metadata": {
            "type": "object",
            "properties": {
                "current_page": {
                    "description": "The current page number.",
                    "type": "integer",
                    "example": 2
                },
                "first_page": {
                    "description": "The first page number, usually 1.",
                    "type": "integer",
                    "example": 1
                },
                "last_page": {
                    "description": "The last page number based on total records and page size.",
                    "type": "integer",
                    "example": 3
                },
                "page_size": {
                    "description": "The number of items per page.",
                    "type": "integer",
                    "example": 5
                },
                "total_records": {
                    "description": "The total number of records available.",
                    "type": "integer",
                    "example": 15
                }
            }
        },
        "models.Collection": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "created_at": {
                    "description": "Timestamp when the collection was created.",
                    "type": "string",
                    "example": "2024-09-04T13:37:24.87653+05:00"
                },
                "description": {
                    "description": "Description of the collection; optional, up to 500 characters.",
                    "type": "string",
                    "maxLength": 500,
                    "example": "This is description"
                },
                "id": {
                    "description": "Unique identifier for the collection.",
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "description": "Name of the collection; required, between 3 and 100 characters.",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "example": "My collection"
                },
                "updated_at": {
                    "description": "Timestamp when the collection was last updated.",
                    "type": "string",
                    "example": "2024-09-04T13:37:24.87653+05:00"
                },
                "user_id": {
                    "description": "Identifier of the user who created the collection.",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.CollectionFilm": {
            "type": "object",
            "properties": {
                "added_at": {
                    "description": "Timestamp when the film was added to the collection.",
                    "type": "string",
                    "example": "2024-09-04T13:37:24.87653+05:00"
                },
                "collection_id": {
                    "description": "Identifier of the collection.",
                    "type": "integer",
                    "example": 1
                },
                "film_id": {
                    "description": "Identifier of the film.",
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "description": "Timestamp when the association was last updated.",
                    "type": "string",
                    "example": "2024-09-04T13:37:24.87653+05:00"
                }
            }
        },
        "models.Film": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "comment": {
                    "description": "URL of the film's photo; optional, must be a valid URL.",
                    "type": "string",
                    "maxLength": 500,
                    "example": "This is comment"
                },
                "created_at": {
                    "description": "Timestamp when the film was added.",
                    "type": "string",
                    "example": "2024-09-04T13:37:24.87653+05:00"
                },
                "description": {
                    "description": "Description of the film; optional, up to 1000 characters.",
                    "type": "string",
                    "maxLength": 1000,
                    "example": "This is description"
                },
                "genre": {
                    "description": "Genre of the film; optional, only alphabetic characters.",
                    "type": "string",
                    "maxLength": 100,
                    "example": "Horror"
                },
                "id": {
                    "description": "Unique identifier for the film.",
                    "type": "integer",
                    "example": 1
                },
                "is_viewed": {
                    "description": "Indicates if the user has viewed the film.",
                    "type": "boolean",
                    "example": false
                },
                "photo_url": {
                    "description": "URL of the film's photo; optional, must be a valid URL.",
                    "type": "string",
                    "example": "https://placeimg.com/640/480"
                },
                "rating": {
                    "description": "Rating of the film; optional, must be between 1 and 10.",
                    "type": "number",
                    "maximum": 10,
                    "minimum": 1,
                    "example": 6.7
                },
                "review": {
                    "description": "User's review of the film; optional, up to 500 characters.",
                    "type": "string",
                    "maxLength": 500,
                    "example": "This is review"
                },
                "title": {
                    "description": "Title of the film; required, between 3 and 100 characters.",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "example": "My film"
                },
                "updated_at": {
                    "description": "Timestamp when the film details were last updated.",
                    "type": "string",
                    "example": "2024-09-04T13:37:24.87653+05:00"
                },
                "user_id": {
                    "description": "Identifier of the user who added the film.",
                    "type": "integer",
                    "example": 1
                },
                "user_rating": {
                    "description": "User's rating of the film; optional, between 1 and 10.",
                    "type": "number",
                    "maximum": 10,
                    "minimum": 1,
                    "example": 5.5
                },
                "year": {
                    "description": "Release year of the film; optional, must be between 1888 and 2100.",
                    "type": "integer",
                    "maximum": 2100,
                    "minimum": 1888,
                    "example": 2001
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "email",
                "username"
            ],
            "properties": {
                "created_at": {
                    "description": "Timestamp when the user was created.",
                    "type": "string",
                    "example": "2024-09-04T13:37:24.87653+05:00"
                },
                "email": {
                    "description": "Email address of the user; must be a valid email format.",
                    "type": "string",
                    "example": "john_doe@example.com"
                },
                "id": {
                    "description": "Unique identifier for the user.",
                    "type": "integer",
                    "example": 1
                },
                "username": {
                    "description": "Username of the user; must be unique and valid.",
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "swagger.AccessTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOI6IkpXVCJ9.eyJzdk5EbifQ.4CfEaMw6Ur_fszI"
                }
            }
        },
        "swagger.AuthResponse": {
            "type": "object",
            "required": [
                "email",
                "username"
            ],
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIs.eyJzdWIilIn0.iTNuOHMObmeRmKU"
                },
                "created_at": {
                    "description": "Timestamp when the user was created.",
                    "type": "string",
                    "example": "2024-09-04T13:37:24.87653+05:00"
                },
                "email": {
                    "description": "Email address of the user; must be a valid email format.",
                    "type": "string",
                    "example": "john_doe@example.com"
                },
                "id": {
                    "description": "Unique identifier for the user.",
                    "type": "integer",
                    "example": 1
                },
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOI6IkpXVCJ9.eyJzdk5EbifQ.4CfEaMw6Ur_fszI"
                },
                "username": {
                    "description": "Username of the user; must be unique and valid.",
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "swagger.CollectionFilmRequest": {
            "type": "object",
            "properties": {
                "added_at": {
                    "type": "string",
                    "example": "2024-09-04T13:37:24.87653+05:00"
                }
            }
        },
        "swagger.CollectionFilmResponse": {
            "type": "object",
            "properties": {
                "collection_film": {
                    "$ref": "#/definitions/models.CollectionFilm"
                }
            }
        },
        "swagger.CollectionFilmsResponse": {
            "type": "object",
            "properties": {
                "collection_films": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CollectionFilm"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/filters.Metadata"
                }
            }
        },
        "swagger.CollectionRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "This is description"
                },
                "name": {
                    "type": "string",
                    "example": "My collection"
                }
            }
        },
        "swagger.CollectionResponse": {
            "type": "object",
            "properties": {
                "collection": {
                    "$ref": "#/definitions/models.Collection"
                }
            }
        },
        "swagger.CollectionsResponse": {
            "type": "object",
            "properties": {
                "collections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Collection"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/filters.Metadata"
                }
            }
        },
        "swagger.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "some kind of error"
                }
            }
        },
        "swagger.FilmRequest": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string",
                    "example": "This is comment"
                },
                "description": {
                    "type": "string",
                    "example": "This is description"
                },
                "genre": {
                    "type": "string",
                    "example": "Horror"
                },
                "int": {
                    "type": "integer",
                    "example": 2001
                },
                "is_viewed": {
                    "type": "boolean",
                    "example": true
                },
                "photo_url": {
                    "type": "string",
                    "example": "https://placeimg.com/640/480"
                },
                "rating": {
                    "type": "number",
                    "example": 6.7
                },
                "review": {
                    "type": "string",
                    "example": "This is review."
                },
                "title": {
                    "type": "string",
                    "example": "My film"
                },
                "user_rating": {
                    "type": "number",
                    "example": 5.5
                }
            }
        },
        "swagger.FilmResponse": {
            "type": "object",
            "properties": {
                "film": {
                    "$ref": "#/definitions/models.Film"
                }
            }
        },
        "swagger.FilmsResponse": {
            "type": "object",
            "properties": {
                "films": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Film"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/filters.Metadata"
                }
            }
        },
        "swagger.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "enabled"
                },
                "system_info": {
                    "$ref": "#/definitions/swagger.systemInfo"
                }
            }
        },
        "swagger.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john_doe@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "Secret1!"
                }
            }
        },
        "swagger.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "some kind of success message"
                }
            }
        },
        "swagger.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john_doe@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "Secret1!"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "swagger.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "example": "new_username"
                }
            }
        },
        "swagger.UserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "swagger.systemInfo": {
            "type": "object",
            "properties": {
                "environment": {
                    "type": "string",
                    "example": "prod"
                },
                "version": {
                    "type": "string",
                    "example": "20240916192353"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWTAuth": {
            "description": "JWT Authorization header using the Bearer scheme. Example: 'Authorization: Bearer {token}'",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Watchlist API",
	Description:      "This is a REST API for saving films you want to watch.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
