{
	"info": {
		"_postman_id": "cd48afb6-52bc-4ae3-8f8e-7ecdf4792a7f",
		"name": "wishlist-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "37771019"
	},
	"item": [
		{
			"name": "monitoring",
			"item": [
				{
					"name": "Server status and system info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status and system_info\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('system_info');",
									"});",
									"",
									"",
									"pm.test(\"Environment is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.system_info.environment).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Version is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.system_info.version).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Version should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BASE_URL}}/api/v1/healthcheck"
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "Register a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201) {",
									"    var accessToken = pm.response.json().user.access_token;",
									"    var refreshToken = pm.response.json().user.refresh_token;",
									"    var email = pm.response.json().user.email",
									"",
									"    pm.collectionVariables.set(\"ACCESS_TOKEN\", accessToken);",
									"    pm.collectionVariables.set(\"REFRESH_TOKEN\", refreshToken);",
									"    pm.collectionVariables.set(\"EMAIL\", email)",
									"}",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"User object is valid\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.user).to.exist;",
									"  pm.expect(responseData.user).to.be.an('object');",
									"  pm.expect(responseData.user.id).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.user.username).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.user.email).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.user.created_at).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.user.access_token).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.user.refresh_token).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									"",
									"",
									"pm.test(\"Created_at, access_token, and refresh_token are not empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.user.created_at).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  pm.expect(responseData.user.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  pm.expect(responseData.user.refresh_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345Az!\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/api/v1/auth/register"
					},
					"response": []
				},
				{
					"name": "Refresh access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    var accessToken = pm.response.json().access_token;\r",
									"\r",
									"    pm.collectionVariables.set(\"ACCESS_TOKEN\", accessToken);\r",
									"}\r",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('access_token');",
									"});",
									"",
									"",
									"pm.test(\"Access token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"headerPrefix": "Bearer",
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "POST",
						"header": [],
						"url": "{{BASE_URL}}/api/v1/auth/refresh"
					},
					"response": []
				},
				{
					"name": "Log out of account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message field is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message relates to successful logout\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.include(\"token revoked\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"headerPrefix": "Bearer",
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "POST",
						"header": [],
						"url": "{{BASE_URL}}/api/v1/auth/logout"
					},
					"response": []
				},
				{
					"name": "Log in to account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {\r",
									"    var accessToken = pm.response.json().user.access_token;\r",
									"    var refreshToken = pm.response.json().user.refresh_token;\r",
									"\r",
									"    pm.collectionVariables.set(\"ACCESS_TOKEN\", accessToken);\r",
									"    pm.collectionVariables.set(\"REFRESH_TOKEN\", refreshToken);\r",
									"\r",
									"    console.log(accessToken, refreshToken) ;\r",
									"}",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"User object is valid\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.user).to.exist;",
									"  pm.expect(responseData.user).to.be.an('object');",
									"  pm.expect(responseData.user.id).to.be.a('number');",
									"  pm.expect(responseData.user.username).to.be.a('string');",
									"  pm.expect(responseData.user.email).to.be.a('string');",
									"  pm.expect(responseData.user.created_at).to.be.a('string');",
									"  pm.expect(responseData.user.access_token).to.be.a('string');",
									"  pm.expect(responseData.user.refresh_token).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.user.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
									"});",
									"",
									"",
									"pm.test(\"Access token and refresh token are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.user.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");",
									"  pm.expect(responseData.user.refresh_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{EMAIL}}\",\r\n    \"password\": \"12345Az!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/api/v1/auth/login"
					},
					"response": []
				},
				{
					"name": "Get user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"User object schema is valid\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.user).to.exist;\r",
									"    pm.expect(responseData.user.id).to.exist;\r",
									"    pm.expect(responseData.user.username).to.exist;\r",
									"    pm.expect(responseData.user.email).to.exist;\r",
									"    pm.expect(responseData.user.created_at).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"headerPrefix": "Bearer",
								"tokenType": "",
								"accessToken": "",
								"addTokenTo": "header"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BASE_URL}}/api/v1/user"
					},
					"response": []
				},
				{
					"name": "Update user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"User object schema is valid\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.user).to.exist.and.to.be.an('object');\r",
									"  pm.expect(responseData.user.id).to.exist.and.to.be.a('number');\r",
									"  pm.expect(responseData.user.username).to.exist.and.to.be.a('string');\r",
									"  pm.expect(responseData.user.email).to.exist.and.to.be.a('string');\r",
									"  pm.expect(responseData.user.created_at).to.exist.and.to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"accessToken": "",
								"addTokenTo": "header"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/api/v1/user"
					},
					"response": []
				}
			]
		},
		{
			"name": "films",
			"item": [
				{
					"name": "Add new film",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201) {\r",
									"    var jsonData = pm.response.json().film.id;\r",
									"\r",
									"    pm.collectionVariables.set(\"FILM_ID\", jsonData);\r",
									"}\r",
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the film object schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.film).to.be.an('object');\r",
									"    pm.expect(responseData.film).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(responseData.film).to.have.property('user_id').that.is.a('number');\r",
									"    pm.expect(responseData.film).to.have.property('title').that.is.a('string');\r",
									"    pm.expect(responseData.film).to.have.property('year').that.is.a('number');\r",
									"    pm.expect(responseData.film).to.have.property('genre').that.is.a('string');\r",
									"    pm.expect(responseData.film).to.have.property('description').that.is.a('string');\r",
									"    pm.expect(responseData.film).to.have.property('rating').that.is.a('number');\r",
									"    pm.expect(responseData.film).to.have.property('photo_url').that.is.a('string');\r",
									"    pm.expect(responseData.film).to.have.property('comment').that.is.a('string');\r",
									"    pm.expect(responseData.film).to.have.property('is_viewed').that.is.a('boolean');\r",
									"    pm.expect(responseData.film).to.have.property('created_at').that.is.a('string');\r",
									"    pm.expect(responseData.film).to.have.property('updated_at').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomWords}}\",\r\n    \"year\": 2010,\r\n    \"genre\": \"Action\",\r\n    \"description\": \"{{$randomPhrase}}\",\r\n    \"rating\": 7.1,\r\n    \"photo_url\": \"{{$randomImageUrl}}\",\r\n    \"comment\": \"{{$randomPhrase}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/api/v1/films"
					},
					"response": []
				},
				{
					"name": "Get user films",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.films).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
									"    \r",
									"    responseData.films.forEach(film => {\r",
									"        pm.expect(film).to.have.property('id');\r",
									"        pm.expect(film).to.have.property('user_id');\r",
									"        pm.expect(film).to.have.property('title');\r",
									"        pm.expect(film).to.have.property('year');\r",
									"        pm.expect(film).to.have.property('genre');\r",
									"        pm.expect(film).to.have.property('description');\r",
									"        pm.expect(film).to.have.property('rating');\r",
									"        pm.expect(film).to.have.property('photo_url');\r",
									"        pm.expect(film).to.have.property('comment');\r",
									"        pm.expect(film).to.have.property('is_viewed');\r",
									"        pm.expect(film).to.have.property('created_at');\r",
									"        pm.expect(film).to.have.property('updated_at');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the metadata object and its properties\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.metadata).to.exist.and.to.be.an('object');\r",
									"  pm.expect(responseData.metadata.current_page).to.exist;\r",
									"  pm.expect(responseData.metadata.page_size).to.exist;\r",
									"  pm.expect(responseData.metadata.first_page).to.exist;\r",
									"  pm.expect(responseData.metadata.last_page).to.exist;\r",
									"  pm.expect(responseData.metadata.total_records).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"accessToken": "",
								"addTokenTo": "header"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BASE_URL}}/api/v1/films"
					},
					"response": []
				},
				{
					"name": "Get user films with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"All films have rating >= 5\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.films).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.films.forEach(function (film) {\r",
									"        pm.expect(film.rating).to.be.at.least(5);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Films are sorted by id in descending order\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const films = responseData.films;\r",
									"\r",
									"    pm.expect(films).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    if (films.length > 1) {\r",
									"        for (let i = 1; i < films.length; i++) {\r",
									"            pm.expect(films[i].id).to.be.below(films[i - 1].id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Page contains correct number of films\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.films).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct current page is returned\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.metadata.current_page).to.equal(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"accessToken": "",
								"addTokenTo": "header"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/films?rating_min=5&sort=-id&page=1&page_size=1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"films"
							],
							"query": [
								{
									"key": "rating_min",
									"value": "5"
								},
								{
									"key": "sort",
									"value": "-id"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get film by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the film object schema\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.film).to.be.an('object');\r",
									"\r",
									"  const filmProperties = [\r",
									"    \"id\",\r",
									"    \"user_id\",\r",
									"    \"title\",\r",
									"    \"year\",\r",
									"    \"genre\",\r",
									"    \"description\",\r",
									"    \"rating\",\r",
									"    \"photo_url\",\r",
									"    \"comment\",\r",
									"    \"is_viewed\",\r",
									"    \"created_at\",\r",
									"    \"updated_at\"\r",
									"  ];\r",
									"\r",
									"  filmProperties.forEach(property => {\r",
									"    pm.expect(responseData.film).to.have.property(property);\r",
									"  });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"headerPrefix": "Bearer",
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BASE_URL}}/api/v1/films/{{FILM_ID}}"
					},
					"response": []
				},
				{
					"name": "Update the film",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the film object schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.film).to.be.an('object');\r",
									"    pm.expect(responseData.film).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(responseData.film).to.have.property('user_id').that.is.a('number');\r",
									"    pm.expect(responseData.film).to.have.property('title').that.is.a('string');\r",
									"    pm.expect(responseData.film).to.have.property('year').that.is.a('number');\r",
									"    pm.expect(responseData.film).to.have.property('genre').that.is.a('string');\r",
									"    pm.expect(responseData.film).to.have.property('description').that.is.a('string');\r",
									"    pm.expect(responseData.film).to.have.property('rating').that.is.a('number');\r",
									"    pm.expect(responseData.film).to.have.property('photo_url').that.is.a('string');\r",
									"    pm.expect(responseData.film).to.have.property('comment').that.is.a('string');\r",
									"    pm.expect(responseData.film).to.have.property('is_viewed').that.is.a('boolean');\r",
									"    pm.expect(responseData.film).to.have.property('user_rating').that.is.a('number');\r",
									"    pm.expect(responseData.film).to.have.property('review').that.is.a('string');\r",
									"    pm.expect(responseData.film).to.have.property('created_at').that.is.a('string');\r",
									"    pm.expect(responseData.film).to.have.property('updated_at').that.is.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_viewed\": true,\r\n    \"user_rating\":1,\r\n    \"review\": \"{{$randomPhrase}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/api/v1/films/{{FILM_ID}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "collections",
			"item": [
				{
					"name": "Add new collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {\r",
									"    var jsonData = pm.response.json().collection.id;\r",
									"    pm.collectionVariables.set(\"COLLECTION_ID\", jsonData);\r",
									"}\r",
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json().collection;\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('user_id');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('description');\r",
									"    pm.expect(responseData).to.have.property('created_at');\r",
									"    pm.expect(responseData).to.have.property('updated_at');\r",
									"});\r",
									"\r",
									"pm.test(\"Created_at and updated_at fields are in a valid date format\", function () {\r",
									"    const responseData = pm.response.json().collection;\r",
									"    \r",
									"    pm.expect(responseData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);\r",
									"    pm.expect(responseData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomWords}}\",\r\n    \"description\": \"{{$randomPhrase}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/api/v1/collections"
					},
					"response": []
				},
				{
					"name": "Get user collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, user_id, name, description, created_at, and updated_at\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.collections).to.be.an('array').that.is.not.empty;\r",
									"    responseData.collections.forEach(function(collection) {\r",
									"        pm.expect(collection).to.have.property('id');\r",
									"        pm.expect(collection).to.have.property('user_id');\r",
									"        pm.expect(collection).to.have.property('name');\r",
									"        pm.expect(collection).to.have.property('description');\r",
									"        pm.expect(collection).to.have.property('created_at');\r",
									"        pm.expect(collection).to.have.property('updated_at');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Created_at and updated_at are in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.collections).to.be.an('array');\r",
									"    responseData.collections.forEach(function(collection) {\r",
									"        pm.expect(collection.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);\r",
									"        pm.expect(collection.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/collections?page_size=10&sort=-created_at",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"collections"
							],
							"query": [
								{
									"key": "page_size",
									"value": "10"
								},
								{
									"key": "sort",
									"value": "-created_at"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user collections with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Collections are sorted by name in descending order\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const collections = responseData.collections;\r",
									"\r",
									"    pm.expect(collections).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    if (collections.length > 1) {\r",
									"        for (let i = 1; i < collections.length; i++) {\r",
									"            pm.expect(collections[i].name.localeCompare(collections[i - 1].name)).to.be.at.most(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Page contains correct number of collections\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.collections).to.have.length.of.at.most(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct current page is returned\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.metadata.current_page).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/collections?page_size=10&page=1&sort=-name",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"collections"
							],
							"query": [
								{
									"key": "page_size",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "sort",
									"value": "-name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get collection by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Updated response time test to 300ms\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Created_at and updated_at fields are in a valid date format\", function () {\r",
									"    const responseData = pm.response.json().collection;\r",
									"    \r",
									"    pm.expect(responseData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);\r",
									"    pm.expect(responseData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Collection object schema is valid\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.collection.id).to.exist.and.to.be.a('number');\r",
									"  pm.expect(responseData.collection.user_id).to.exist.and.to.be.a('number');\r",
									"  pm.expect(responseData.collection.name).to.exist.and.to.be.a('string');\r",
									"  pm.expect(responseData.collection.description).to.exist.and.to.be.a('string');\r",
									"  pm.expect(responseData.collection.created_at).to.exist.and.to.be.a('string');\r",
									"  pm.expect(responseData.collection.updated_at).to.exist.and.to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BASE_URL}}/api/v1/collections/{{COLLECTION_ID}}"
					},
					"response": []
				},
				{
					"name": "Update the collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('collection');\r",
									"    \r",
									"    const collection = responseData.collection;\r",
									"    pm.expect(collection).to.have.property('id');\r",
									"    pm.expect(collection).to.have.property('user_id');\r",
									"    pm.expect(collection).to.have.property('name');\r",
									"    pm.expect(collection).to.have.property('description');\r",
									"    pm.expect(collection).to.have.property('created_at');\r",
									"    pm.expect(collection).to.have.property('updated_at');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Created_at and updated_at are in a valid date format\", function () {\r",
									"    const responseData = pm.response.json().collection;\r",
									"\r",
									"    pm.expect(responseData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);\r",
									"    pm.expect(responseData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomWords}}\",\r\n    \"description\": \"{{$randomPhrase}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/api/v1/collections/{{COLLECTION_ID}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "collectionFilms",
			"item": [
				{
					"name": "Add film to collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.to.have.status(201));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the structure of the 'collection_film' object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.collection_film).to.have.property('collection_id');\r",
									"    pm.expect(responseData.collection_film).to.have.property('film_id');\r",
									"    pm.expect(responseData.collection_film).to.have.property('added_at');\r",
									"    pm.expect(responseData.collection_film).to.have.property('updated_at');\r",
									"});\r",
									"\r",
									"pm.test(\"Added_at and updated_at are in a valid date format\", function () {\r",
									"    const responseData = pm.response.json().collection_film;\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.added_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);\r",
									"    pm.expect(responseData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/api/v1/collections/{{COLLECTION_ID}}/films/{{FILM_ID}}"
					},
					"response": []
				},
				{
					"name": "Get films from collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Collection_films array has correct structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.collection_films).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.collection_films.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('collection_id').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('film_id').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('added_at').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('updated_at').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Metadata pagination is valid\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const metadata = responseData.metadata;\r",
									"    \r",
									"    pm.expect(metadata.current_page).to.be.a('number').and.to.equal(1);\r",
									"    pm.expect(metadata.page_size).to.be.a('number').and.to.equal(5);\r",
									"    pm.expect(metadata.first_page).to.be.a('number').and.to.equal(1);\r",
									"    pm.expect(metadata.last_page).to.be.a('number').and.to.equal(1);\r",
									"    pm.expect(metadata.total_records).to.be.a('number').and.to.equal(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BASE_URL}}/api/v1/collections/{{COLLECTION_ID}}/films"
					},
					"response": []
				},
				{
					"name": "Get films from collection with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Collection films are sorted by film_id in descending order\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const collectionFilms = responseData.collection_films;\r",
									"\r",
									"    pm.expect(collectionFilms).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    if (collectionFilms.length > 1) {\r",
									"        for (let i = 1; i < collectionFilms.length; i++) {\r",
									"            pm.expect(collectionFilms[i].film_id).to.be.below(collectionFilms[i - 1].film_id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Page contains correct number of collection films\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.collection_films).to.have.length.of.at.most(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct current page is returned\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.metadata.current_page).to.equal(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/collections/{{COLLECTION_ID}}/films?page_size=10&page=1&sort=-film_id",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"collections",
								"{{COLLECTION_ID}}",
								"films"
							],
							"query": [
								{
									"key": "page_size",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "sort",
									"value": "-film_id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get film from collection by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Validate the film object schema\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.collection_film).to.be.an('object');",
									"",
									"  const collectionFilmProperties = [",
									"    \"collection_id\",",
									"    \"film_id\",",
									"    \"added_at\",",
									"    \"updated_at\"",
									"  ];",
									"",
									"  collectionFilmProperties.forEach(property => {",
									"    pm.expect(responseData.collection_film).to.have.property(property);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Collection_id and film_id are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.collection_film.collection_id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Collection_id should be a non-negative integer\");",
									"    pm.expect(responseData.collection_film.film_id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Film_id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Added_at and updated_at are in a valid date format\", function () {",
									"    const responseData = pm.response.json().collection_film;",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.added_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);",
									"    pm.expect(responseData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BASE_URL}}/api/v1/collections/{{COLLECTION_ID}}/films/{{FILM_ID}}"
					},
					"response": []
				},
				{
					"name": "Update film in collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the film object schema\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.collection_film).to.be.an('object');\r",
									"\r",
									"  const collectionFilmProperties = [\r",
									"    \"collection_id\",\r",
									"    \"film_id\",\r",
									"    \"added_at\",\r",
									"    \"updated_at\"\r",
									"  ];\r",
									"\r",
									"  collectionFilmProperties.forEach(property => {\r",
									"    pm.expect(responseData.collection_film).to.have.property(property);\r",
									"  });\r",
									"});\r",
									"\r",
									"pm.test(\"Added_at and updated_at are in a valid date format\", function () {\r",
									"    const responseData = pm.response.json().collection_film;\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.added_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);\r",
									"    pm.expect(responseData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+)?([+-]\\d{2}:\\d{2}|Z)$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"added_at\": \"2024-06-25T15:18:27.599064Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/api/v1/collections/{{COLLECTION_ID}}/films/{{FILM_ID}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "delete",
			"item": [
				{
					"name": "Delete film from collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
									"    pm.expect(responseData.message).to.equal('collection_film deleted');",
									"});",
									"",
									"pm.test(\"Message field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.length.above(0, \"Message field should be a non-empty string\");",
									"});",
									"",
									"",
									"pm.test(\"Response body contains only the success message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(Object.keys(responseData)).to.have.lengthOf(1); // Проверяем, что в ответе только одно поле",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BASE_URL}}/api/v1/collections/{{COLLECTION_ID}}/films/{{FILM_ID}}"
					},
					"response": []
				},
				{
					"name": "Delete the collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
									"    pm.expect(responseData.message).to.equal('collection deleted');",
									"});",
									"",
									"",
									"pm.test(\"Response body contains only the success message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(Object.keys(responseData)).to.have.lengthOf(1); // Проверяем, что в ответе только одно поле",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Validate HTTP request method is DELETE\", function () {",
									"    pm.expect(pm.request.method).to.equal('DELETE');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BASE_URL}}/api/v1/collections/{{COLLECTION_ID}}"
					},
					"response": []
				},
				{
					"name": "Delete the film",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
									"    pm.expect(responseData.message).to.equal('film deleted');",
									"});",
									"",
									"",
									"pm.test(\"Response body contains only the success message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(Object.keys(responseData)).to.have.lengthOf(1); // Проверяем, что в ответе только одно поле",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Validate HTTP request method is DELETE\", function () {",
									"    pm.expect(pm.request.method).to.equal('DELETE');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"addTokenTo": "header"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BASE_URL}}/api/v1/films/{{FILM_ID}}"
					},
					"response": []
				},
				{
					"name": "Delete user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has a valid Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
									"    pm.expect(responseData.message).to.equal('user deleted');",
									"});",
									"",
									"",
									"pm.test(\"Response body contains only the success message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(Object.keys(responseData)).to.have.lengthOf(1); // Проверяем, что в ответе только одно поле",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Validate HTTP request method is DELETE\", function () {",
									"    pm.expect(pm.request.method).to.equal('DELETE');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"tokenType": "",
								"accessToken": "",
								"addTokenTo": "header"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BASE_URL}}/api/v1/user"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://localhost:8001",
			"type": "string"
		},
		{
			"key": "ACCESS_TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "REFRESH_TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "FILM_ID",
			"value": "1",
			"type": "string"
		},
		{
			"key": "COLLECTION_ID",
			"value": "1",
			"type": "string"
		},
		{
			"key": "COLLECTION_FILM_ID",
			"value": "1",
			"type": "string"
		},
		{
			"key": "USERNAME",
			"value": "",
			"type": "string"
		},
		{
			"key": "EMAIL",
			"value": "",
			"type": "string"
		}
	]
}