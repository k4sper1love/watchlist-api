name: Deploy to Server

on:
  push:
    branches:
      - metrics

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Project Files
      - name: Checkout Project Files
        uses: actions/checkout@v3

      # 2. Configure SSH Access
      - name: Configure SSH Access
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 3. Set VERSION and Create Tag
      - name: Set VERSION and Create Tag
        run: |
          VERSION=$(date +'%Y%m%d%H%M%S')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"

          git tag -a "v${VERSION}" -m "Release version ${VERSION}"
          git push origin "v${VERSION}"

      # 4. Upload Project to Server
      - name: Upload Project to Server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            mkdir -p /home/${{ secrets.SSH_USER }}/watchlist-api
          EOF
          
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r ./* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/watchlist-api
          
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
           chmod +x /home/${{ secrets.SSH_USER }}/watchlist-api/generate_prometheus_config.sh
          EOF

      # 5. Deploy Application with Docker Compose
      - name: Deploy Application with Docker Compose
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=5 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/${{ secrets.SSH_USER }}/watchlist-api
          
            # Export environment variables 
            export SERVER_HOST=${{ secrets.SSH_HOST }}
            export APP_PORT=${{ secrets.APP_PORT }}
            export APP_SECRET=${{ secrets.APP_SECRET }}  
            export APP_ENV=${{ secrets.APP_ENV }}  
            export APP_MIGRATIONS=${{ secrets.APP_MIGRATIONS }}  
            export APP_DSN=${{ secrets.APP_DSN }}  
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}  
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}  
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}  
            export POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            export VERSION=${{ env.VERSION }}
            export GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
          
            # Conditional build
            if [[ "${{ secrets.FULL_REBUILD }}" == "true" ]]; then
              docker-compose down --rmi all
              docker-compose build --no-cache
            else 
              docker-compose build
            fi
          
            docker-compose up -d
          EOF

      # 6. Prepare Node.js Environment for Testing
      - name: Prepare Node.js Environment for Testing
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Install Node.js if not present
            if ! command -v node &> /dev/null; then
              echo "Node.js not found, installing..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "Node.js is already installed"
            fi

            # Install npm if not present
            if ! command -v npm &> /dev/null; then
              echo "npm not found, installing..."
              sudo apt-get install -y npm
            else
              echo "npm is already installed"
            fi

            # Install Newman if not present
            if ! command -v newman &> /dev/null; then
              echo "Newman not found, installing..."
              npm install -g newman
            else
              echo "Newman is already installed"
            fi
          EOF

      # 7. Execute Postman Tests
      - name: Execute Postman Tests
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/${{ secrets.SSH_USER }}/watchlist-api/tests/postman
          
            # Clear the cache
            sudo systemd-resolve --flush-caches
          
            # Determine BASE_URL based on USE_HTTPS
            BASE_URL="http://${{ secrets.SSH_HOST }}:${{ secrets.APP_PORT }}"
          
            # Run the Newman tests
            newman run postman_collection.json --environment postman_environment.json --env-var "BASE_URL=$BASE_URL"
          EOF
