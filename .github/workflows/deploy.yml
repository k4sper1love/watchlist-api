name: Deploy to Server

on:
  push:
    branches:
      - https
permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Uploading project files to GitHub Runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up a private SSH key
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Creating a version based on the current date and time
      - name: Set VERSION to environment
        run: echo "VERSION=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      # Creating a new tag containing the current version
      - name: Create and push VERSION tag
        run: |
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          
          VERSION=$(date +'%Y%m%d%H%M%S')
          git tag -a "v${VERSION}" -m "Release version ${VERSION}"
          git push origin "v${VERSION}"

      # Copying project files to the server storage
      - name: Copy project to server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            mkdir -p /home/${{ secrets.SSH_USER }}/watchlist-api
          EOF
          
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r ./* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/watchlist-api

      # Obtaining SSL certificates for HTTPS (only if USE_HTTP=true)
      - name: Install Certbot and obtain SSL certificates
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Check if USE_HTTPS is true
            if [ "${{ secrets.USE_HTTPS }}" = "true" ]; then
              # Check if Certbot is installed
              if ! command -v certbot &> /dev/null; then
                echo "Certbot not found, installing..."
                sudo apt-get update
                sudo apt-get install -y certbot
              else
                echo "Certbot is already installed"
              fi
      
              # Check if SSL certificates already exist
              CERT_PATH="/etc/letsencrypt/live/${{ secrets.SSH_HOST }}/fullchain.pem"
              if [ -f "$CERT_PATH" ]; then
                echo "SSL certificates already exist, skipping certificate issuance"
              else
                echo "SSL certificates not found, obtaining new certificates..."
                sudo certbot certonly --standalone --non-interactive --agree-tos -m ${{ secrets.GIT_USER_EMAIL }} -d ${{ secrets.SSH_HOST }}
              fi
      
              # Ensure a cron job exists for automatic certificate renewal
              if ! crontab -l | grep -q "certbot renew"; then
                echo "Setting up a cron job for automatic certificate renewal..."
                (crontab -l ; echo "0 0,12 * * * certbot renew --post-hook 'systemctl restart nginx'") | crontab -
              else
                echo "Cron job for certificate renewal is already set up"
              fi
            else
              echo "HTTPS is disabled, skipping SSL certificate setup."
            fi
          EOF

      # Exporting environment variables and running docker compose
      - name: Deploy using Docker Compose
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=5 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/${{ secrets.SSH_USER }}/watchlist-api
          
            # Export environment variables 
            export SERVER_HOST=${{ secrets.SSH_HOST }}
            export APP_PORT=${{ secrets.APP_PORT }}
            export APP_SECRET=${{ secrets.APP_SECRET }}  
            export APP_ENV=${{ secrets.APP_ENV }}  
            export APP_MIGRATIONS=${{ secrets.APP_MIGRATIONS }}  
            export APP_DSN=${{ secrets.APP_DSN }}  
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}  
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}  
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}  
            export POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            export VERSION=${{ env.VERSION }}
            export GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
            export USE_HTTPS=${{ secrets.USE_HTTPS }}
          
            # Deploy with Docker Compose
            docker-compose down
            sudo docker kill $(docker ps -q)
          
            # If FULL_REBUILD = true, then use --no-cache
            if [[ "${{ secrets.FULL_REBUILD }}" == "true" ]]; then
              docker-compose build --no-cache
            else 
              docker-compose build
            fi
          
            docker-compose up -d
          EOF

      # Installing dependencies (node.js, npm, newman) to run Postman tests if they are not already installed
      - name: Install Node.js, npm, and Newman
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Check if Node.js is installed
            if ! command -v node &> /dev/null; then
              echo "Node.js not found, installing..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "Node.js is already installed"
            fi

            # Check if npm is installed
            if ! command -v npm &> /dev/null; then
              echo "npm not found, installing..."
              sudo apt-get install -y npm
            else
              echo "npm is already installed"
            fi

            # Check if Newman is installed
            if ! command -v newman &> /dev/null; then
              echo "Newman not found, installing..."
              npm install -g newman
            else
              echo "Newman is already installed"
            fi
          EOF

      # Running tests from Postman located in the tests/postman folder
      - name: Run Postman tests
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/${{ secrets.SSH_USER }}/watchlist-api/tests/postman
          
            # Determine BASE_URL based on USE_HTTPS
            if [ "${{ secrets.USE_HTTPS }}" == "true" ]; then
              BASE_URL="https://${{ secrets.SSH_HOST }}:${{ secrets.APP_PORT }}"
            else
              BASE_URL="http://${{ secrets.SSH_HOST }}:${{ secrets.APP_PORT }}"
            fi
          
            # Update postman_environment.json with BASE_URL
            jq --arg url "$BASE_URL" '.values[] |= if .key == "BASE_URL" then .value = $url else . end' postman_environment.json > temp.json && mv temp.json postman_environment.json

            newman run postman_collection.json --environment postman_environment.json
          EOF
