name: Deploy to Server

on:
  push:
    branches:
      - ci/cd

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set VERSION environment variable
        run: echo "VERSION=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Create and push Version tag
        run: |
          git config --global user.email "elkin_serega.2004@mail.ru"
          git config --global user.name "Your Name"
          
          VERSION=$(date +'%Y%m%d%H%M%S')
          git tag -a "v${VERSION}" -m "Release version ${VERSION}"
          git push origin "v${VERSION}"

      - name: Install Docker plugin for Loki
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            echo "Listing installed Docker plugins..."
            docker plugin ls
            echo "Checking for Loki plugin..."
            if docker plugin ls | grep -q 'grafana/loki-docker-driver'; then
              echo "Loki plugin already installed."
            else
              echo "Loki plugin not found. Installing..."
              docker plugin install grafana/loki-docker-driver:2.9.4 --alias loki --grant-all-permissions
            fi
          EOF

      - name: Copy project to server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            if [ -d /home/${{ secrets.SSH_USER }}/watchlist ]; then
              rm -rf /home/${{ secrets.SSH_USER }}/watchlist
            fi
            mkdir -p /home/${{ secrets.SSH_USER }}/watchlist
          EOF
          
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r ./* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/watchlist

      - name: Commands to deploy
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=5 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/${{ secrets.SSH_USER }}/watchlist
          
            # Export environment variables 
            export APP_PORT=${{ secrets.APP_PORT }}
            export APP_SECRET=${{ secrets.APP_SECRET }}  
            export APP_ENV=${{ secrets.APP_ENV }}  
            export APP_MIGRATIONS=${{ secrets.APP_MIGRATIONS }}  
            export APP_DSN=${{ secrets.APP_DSN }}  
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}  
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}  
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}  
            export POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            export VERSION=${{ env.VERSION }}
            export GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
          
            # Deploy with Docker Compose
            docker-compose down
          
            # If FULL_REBUILD = true, then use --no-cache
            if [[ "${{ secrets.FULL_REBUILD }}" == "true" ]]; then
              docker-compose build --no-cache
            else 
              docker-compose build
            fi
          
            docker-compose up -d
          EOF

      - name: Install Node.js, npm, and Newman
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Check if Node.js is installed
            if ! command -v node &> /dev/null; then
              echo "Node.js not found, installing..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "Node.js is already installed"
            fi

            # Check if npm is installed
            if ! command -v npm &> /dev/null; then
              echo "npm not found, installing..."
              sudo apt-get install -y npm
            else
              echo "npm is already installed"
            fi

            # Check if Newman is installed
            if ! command -v newman &> /dev/null; then
              echo "Newman not found, installing..."
              npm install -g newman
            else
              echo "Newman is already installed"
            fi
          EOF

      - name: Run Postman tests
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/${{ secrets.SSH_USER }}/watchlist/tests/postman
          
            newman run postman_collection.json --environment postman_environment.json
          
          EOF